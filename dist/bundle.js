(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  WIDTH: 12,
  HEIGHT: 24,
  SQUARE_SIZE: 25
};

},{}],2:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Tetromino = require('./Tetromino');

var _Tetromino2 = _interopRequireDefault(_Tetromino);

var _Constants = require('./Constants');

var _Constants2 = _interopRequireDefault(_Constants);

var _Stage = require('./Stage');

var _Stage2 = _interopRequireDefault(_Stage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Game = (function () {
  function Game() {
    var _this = this;

    _classCallCheck(this, Game);

    console.log(PIXI);

    // Keyboard
    var leftKey = this._keyboard(37);
    var upKey = this._keyboard(38);
    var rightKey = this._keyboard(39);
    var downKey = this._keyboard(40);
    leftKey.press = function () {
      return _this._pressLeft();
    };
    upKey.press = function () {
      return _this._pressUp();
    };
    rightKey.press = function () {
      return _this._pressRight();
    };
    downKey.press = function () {
      return _this._pressDown();
    };

    // Set up and launch game
    this.renderer = PIXI.autoDetectRenderer(_Constants2.default.WIDTH * _Constants2.default.SQUARE_SIZE, _Constants2.default.HEIGHT * _Constants2.default.SQUARE_SIZE);
    document.body.appendChild(this.renderer.view);

    this.container = new PIXI.Container();
    this.stage = new _Stage2.default(this.container);
    this.tetromino = _Tetromino2.default.getRandom(this.container);
    this.delay = 300;
    this.start();
  }

  _createClass(Game, [{
    key: 'start',
    value: function start() {
      var self = this;
      var timer = new Date().getTime();
      function loop() {
        if (new Date().getTime() - timer > self.delay) {
          timer = new Date().getTime();
          self.tetromino.move(0, 1);
          if (self.stage.isCollision(self.tetromino)) {
            self.tetromino.move(0, -1);
            self.stage.unite(self.tetromino);
            self.tetromino = _Tetromino2.default.getRandom(self.container);
          }
          self._render();
        }
        requestAnimationFrame(loop);
      }
      requestAnimationFrame(loop);
    }
  }, {
    key: '_pressLeft',
    value: function _pressLeft() {
      this.tetromino.move(-1, 0);
      if (this.stage.isCollision(this.tetromino)) {
        this.tetromino.move(1, 0);
      }
      this._render();
    }
  }, {
    key: '_pressRight',
    value: function _pressRight() {
      this.tetromino.move(1, 0);
      if (this.stage.isCollision(this.tetromino)) {
        this.tetromino.move(-1, 0);
      }
      this._render();
    }
  }, {
    key: '_pressUp',
    value: function _pressUp() {
      this.tetromino.rotate();
      if (this.stage.isCollision(this.tetromino)) {
        this.tetromino.antiRotate();
      }
      this._render();
    }
  }, {
    key: '_pressDown',
    value: function _pressDown() {
      this.tetromino.move(0, 1);
      if (this.stage.isCollision(this.tetromino)) {
        this.tetromino.move(0, -1);
        this.stage.unite(this.tetromino);
        this.tetromino = _Tetromino2.default.getRandom(this.container);
      }
      this._render();
    }
  }, {
    key: '_render',
    value: function _render() {
      this.container.removeChildren();
      this.stage.draw();
      this.tetromino.draw();
      this.renderer.render(this.container);
    }
  }, {
    key: '_keyboard',
    value: function _keyboard(keyCode) {
      var key = {};
      key.code = keyCode;
      key.isDown = false;
      key.isUp = true;
      key.press = undefined;
      key.release = undefined;
      //The `downHandler`
      key.downHandler = function (event) {
        if (event.keyCode === key.code) {
          if (key.isUp && key.press) key.press();
          key.isDown = true;
          key.isUp = false;
        }
        event.preventDefault();
      };

      //The `upHandler`
      key.upHandler = function (event) {
        if (event.keyCode === key.code) {
          if (key.isDown && key.release) key.release();
          key.isDown = false;
          key.isUp = true;
        }
        event.preventDefault();
      };

      //Attach event listeners
      window.addEventListener("keydown", key.downHandler.bind(key), false);
      window.addEventListener("keyup", key.upHandler.bind(key), false);
      return key;
    }
  }]);

  return Game;
})();

exports.default = Game;

},{"./Constants":1,"./Stage":3,"./Tetromino":4}],3:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Constants = require('./Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Stage = (function () {
  function Stage(container) {
    _classCallCheck(this, Stage);

    this.container = container;
    this.data = [];
    for (var x = 0; x < _Constants2.default.WIDTH; x++) {
      this.data.push([]);
      for (var y = 0; y < _Constants2.default.HEIGHT; y++) {
        this.data[x].push(0);
      }
    }
  }

  _createClass(Stage, [{
    key: 'draw',
    value: function draw() {
      for (var x = 0; x < _Constants2.default.WIDTH; x++) {
        for (var y = 0; y < _Constants2.default.HEIGHT; y++) {
          if (this.data[x][y] !== 0) {
            var square = new PIXI.Graphics();
            square.lineStyle(2, 0x0, 1);
            square.beginFill(this.data[x][y]);
            square.drawRect(0, 0, _Constants2.default.SQUARE_SIZE, _Constants2.default.SQUARE_SIZE);
            square.endFill();
            square.x = x * _Constants2.default.SQUARE_SIZE;
            square.y = y * _Constants2.default.SQUARE_SIZE;
            this.container.addChild(square);
          } else {
            var dot = new PIXI.Graphics();
            dot.beginFill(0xffffff);
            dot.drawRect(0, 0, 1, 1);
            dot.x = x * _Constants2.default.SQUARE_SIZE + 0.5 * _Constants2.default.SQUARE_SIZE;
            dot.y = y * _Constants2.default.SQUARE_SIZE + 0.5 * _Constants2.default.SQUARE_SIZE;
            this.container.addChild(dot);
          }
        }
      }
    }
  }, {
    key: 'isCollision',
    value: function isCollision(tetromino) {
      for (var x = 0; x < tetromino.type.size; x++) {
        for (var y = 0; y < tetromino.type.size; y++) {

          if (tetromino.x + x < 0 || tetromino.x + x >= _Constants2.default.WIDTH || y >= _Constants2.default.HEIGHT || tetromino.y >= 0 && this.data[tetromino.x + x][tetromino.y + y] !== 0) {
            if (tetromino.hasBlock(x, y)) {
              return true;
            }
          }
        }
      }
      return false;
    }
  }, {
    key: 'unite',
    value: function unite(tetromino) {
      for (var y = 0; y < tetromino.type.size; y++) {
        for (var x = 0; x < tetromino.type.size; x++) {
          if (tetromino.x + x < _Constants2.default.WIDTH && tetromino.x + x >= 0 && tetromino.hasBlock(x, y)) {
            this.data[tetromino.x + x][tetromino.y + y] = tetromino.type.color;
          }
        }
      }

      for (var y = 0; y < tetromino.type.size; y++) {
        var eraseLine = true;
        if (y + tetromino.y >= _Constants2.default.HEIGHT) {
          eraseLine = false;
        } else {
          for (var x = 0; x < _Constants2.default.WIDTH; x++) {
            if (this.data[x][y + tetromino.y] === 0) {
              eraseLine = false;
              break;
            }
          }
        }
        if (eraseLine) {
          for (var yy = y + tetromino.y; yy >= 0; yy--) {
            for (var x = 0; x < _Constants2.default.WIDTH; x++) {
              if (yy > 0) {
                this.data[x][yy] = this.data[x][yy - 1];
              } else {
                this.data[x][yy] = 0;
              }
            }
          }
        }
      }
    }
  }]);

  return Stage;
})();

exports.default = Stage;

},{"./Constants":1}],4:[function(require,module,exports){
'use strict';

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Types = undefined;

var _Constants = require('./Constants');

var _Constants2 = _interopRequireDefault(_Constants);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Tetromino = (function () {
  function Tetromino(type, container) {
    _classCallCheck(this, Tetromino);

    this.type = type;
    this.container = container;
    this.x = 0;
    this.y = 0;
    this.angle = 0;
  }

  _createClass(Tetromino, [{
    key: 'draw',
    value: function draw() {
      for (var x = 0; x < this.type.size; x++) {
        for (var y = 0; y < this.type.size; y++) {
          if (this.type.shapes[this.angle][y][x] === 1) {
            var square = new PIXI.Graphics();
            square.lineStyle(2, 0x0, 1);
            square.beginFill(this.type.color);
            square.drawRect(0, 0, _Constants2.default.SQUARE_SIZE, _Constants2.default.SQUARE_SIZE);
            square.endFill();
            square.x = (this.x + x) * _Constants2.default.SQUARE_SIZE;
            square.y = (this.y + y) * _Constants2.default.SQUARE_SIZE;
            this.container.addChild(square);
          }
        }
      }
    }
  }, {
    key: 'rotate',
    value: function rotate() {
      this.angle += 1;
      this.angle %= 4;
    }
  }, {
    key: 'antiRotate',
    value: function antiRotate() {
      this.angle -= 1;
      if (this.angle === -1) {
        this.angle = 3;
      }
    }
  }, {
    key: 'move',
    value: function move(dx, dy) {
      this.x += dx;
      this.y += dy;
    }
  }, {
    key: 'hasBlock',
    value: function hasBlock(x, y) {
      return this.type.shapes[this.angle][y][x] === 1;
    }
  }], [{
    key: 'getRandom',
    value: function getRandom(container) {
      var types = [Types.I, Types.J, Types.L, Types.O, Types.S, Types.T, Types.Z];
      var type = types[Math.floor(Math.random() * 7)];
      return new Tetromino(type, container);
    }
  }]);

  return Tetromino;
})();

exports.default = Tetromino;
var Types = exports.Types = {
  I: {
    name: 'I',
    color: 0xFF8000,
    size: 4,
    shapes: [[[0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0], [0, 0, 0, 0]], [[0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0]], [[0, 0, 0, 0], [0, 0, 0, 0], [1, 1, 1, 1], [0, 0, 0, 0]], [[0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0], [0, 1, 0, 0]]]
  },
  J: {
    name: 'J',
    color: 0x00ffff,
    size: 3,
    shapes: [[[1, 0, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 1], [0, 1, 0], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 0, 1]], [[0, 1, 0], [0, 1, 0], [1, 1, 0]]]
  },
  L: {
    name: 'L',
    color: 0xFF0000,
    size: 3,
    shapes: [[[0, 0, 1], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 0], [0, 1, 1]], [[0, 0, 0], [1, 1, 1], [1, 0, 0]], [[1, 1, 0], [0, 1, 0], [0, 1, 0]]]
  },
  O: {
    name: '0',
    color: 0xFFFF00,
    size: 2,
    shapes: [[[1, 1], [1, 1]], [[1, 1], [1, 1]], [[1, 1], [1, 1]], [[1, 1], [1, 1]]]
  },
  S: {
    name: 'S',
    color: 0xFF00FF,
    size: 3,
    shapes: [[[0, 1, 1], [1, 1, 0], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 0, 1]], [[0, 0, 0], [0, 1, 1], [1, 1, 0]], [[1, 0, 0], [1, 1, 0], [0, 1, 0]]]
  },
  T: {
    name: 'I',
    color: 0x80FF00,
    size: 3,
    shapes: [[[0, 1, 0], [1, 1, 1], [0, 0, 0]], [[0, 1, 0], [0, 1, 1], [0, 1, 0]], [[0, 0, 0], [1, 1, 1], [0, 1, 0]], [[0, 1, 0], [1, 1, 0], [0, 1, 0]]]
  },
  Z: {
    name: 'Z',
    color: 0xFFC000,
    size: 3,
    shapes: [[[1, 1, 0], [0, 1, 1], [0, 0, 0]], [[0, 0, 1], [0, 1, 1], [0, 1, 0]], [[0, 0, 0], [1, 1, 0], [0, 1, 1]], [[0, 1, 0], [1, 1, 0], [1, 0, 0]]]
  }
};

},{"./Constants":1}],5:[function(require,module,exports){
'use strict';

var _Game = require('./Game');

var _Game2 = _interopRequireDefault(_Game);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var g = new _Game2.default();

},{"./Game":2}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
